#!/usr/bin/env python

import click
import glob
import logging
import mistune
import os

try:
    import urllib.parse as urlparse
except ImportError:
    import urlparse

LOG = logging.getLogger('linkcheck')


class ValidationError(Exception):
    default = True

    def __str__(self):
        return '{rulename}: {message}'.format(
            message=self.__doc__.format(
                super(ValidationError, self).__str__()),
            rulename=self.name)


class MissingReferenceError(ValidationError):
    '''No reference link named "{}"'''

    name = 'missing-reference'


class BrokenLinkError(ValidationError):
    '''File not found for path "{}"'''

    name = 'broken-link'


class RelativeLinkError(ValidationError):
    '''Link "{}" is a relative link'''

    name = 'relative-link'
    default = False


class ParentLinkError(ValidationError):
    '''Use absolute links instead of ".." in "{}"'''

    name = 'parent-link'
    default = False


class AbsoluteLinkError(ValidationError):
    '''Link "{}" is an absolute link'''

    name = 'absolute-link'


ALL_RULES = [rule.name for rule in ValidationError.__subclasses__()]
DEFAULT_RULES = [rule.name for rule in ValidationError.__subclasses__()
                 if rule.default]


class Validator:
    def __init__(self,
                 pathmap=None,
                 fail_fast=False,
                 docroot='.',
                 rules=None):
        self.fail_fast = fail_fast
        self.docroot = docroot
        self.pathmap = pathmap

        if rules:
            self.rules = set(rules)
        else:
            self.rules = set(DEFAULT_RULES)

    def __call__(self, path):
        return ValidatorContext(self, path)

    def file_exists(self, src, path):
        LOG.debug('file_exists: processing path %s', path)

        paths = []

        for k, v in self.pathmap.items():
            if path.startswith(k):
                candidates = glob.glob(v)
                paths.extend(newpath + path[len(k):]
                             for newpath in candidates)
                break
        else:
            if path.startswith('/'):
                path = '{}/{}'.format(self.docroot, path)
            else:
                path = os.path.join(os.path.dirname(src), path)

            paths.append(path)

        resolved = []
        for path in paths:
            resolved.append(path)
            base, ext = os.path.splitext(path)
            if ext == '.html':
                resolved.append('{}.md'.format(base))

        LOG.debug('file_exists: resolved to: %s', resolved)
        return any(os.path.exists(p) for p in resolved)


class ValidatorContext:
    def __init__(self, validator, path):
        self.validator = validator
        self.path = path

    def __enter__(self):
        self.errors = []
        return self

    def __exit__(self, type, value, traceback):
        if self.errors:
            raise ValidationError()

    def add_error(self, error):
        if error.name in self.validator.rules:
            LOG.debug('add_error: %s: failed %s', self.path, error.name)
            error.path = self.path
            self.errors.append(error)

            if self.validator.fail_fast:
                raise(error)
        else:
            LOG.debug('add_error: %s: ignoring %s', self.path, error.name)

    def file_exists(self, path):
        return self.validator.file_exists(self.path, path)

    def check_local_link(self, url):
        _url = urlparse.urlparse(url)
        if not _url.scheme:
            if not self.file_exists(_url.path):
                self.add_error(BrokenLinkError(url))

            if '../' in _url.path:
                self.add_error(ParentLinkError(url))

            if '/' in _url.path and not _url.path.startswith('/'):
                self.add_error(RelativeLinkError(url))

            if _url.path.startswith('/'):
                self.add_error(AbsoluteLinkError(url))


class LinkCheckerRenderer(mistune.Renderer):
    def __init__(self, validator, *args, **kwargs):
        self._validator = validator
        super(LinkCheckerRenderer, self).__init__(*args, **kwargs)

    def link(self, link, title, text):
        self._validator.check_local_link(link)
        return super(LinkCheckerRenderer, self).link(link, title, text)

    def image(self, src, title, text):
        self._validator.check_local_link(src)
        return super(LinkCheckerRenderer, self).image(src, title, text)


class LinkCheckerLexer(mistune.InlineLexer):
    def __init__(self, validator, *args, **kwargs):
        self._validator = validator
        super(LinkCheckerLexer, self).__init__(*args, **kwargs)

    def output_reflink(self, m):
        key = m.group(2).lower() if m.group(2) else m.group(1).lower()
        if key not in self._links:
            self._validator.add_error(MissingReferenceError(key))

        return super(LinkCheckerLexer, self).output_reflink(m)

    def output_autolink(self, m):
        return super(LinkCheckerLexer, self).output_autolink(m)

    def setup(self, links, footnotes):
        self._links = links
        self._footnotes = footnotes
        return super(LinkCheckerLexer, self).setup(links, footnotes)


@click.command()
@click.option('-f', '--fail-fast', is_flag=True)
@click.option('-d', '--docroot', default='.')
@click.option('-m', '--map', 'pathmap', multiple=True)
@click.option('-v', '--verbosity', is_flag=True, multiple=True)
@click.option('-r', '--rules', type=click.Choice(ALL_RULES))
@click.option('-s', '--skip-rules', type=click.Choice(ALL_RULES))
@click.argument('paths', nargs=-1)
def main(fail_fast, docroot, verbosity, pathmap, rules, skip_rules, paths):
    all_errors = 0
    pathmap = dict(x.split('=') for x in pathmap)
    verbosity = len(verbosity)
    rules = set(rules.split(',') if rules else DEFAULT_RULES)
    skip_rules = set(skip_rules.split(',') if skip_rules else [])

    try:
        loglevel = ['WARNING', 'INFO', 'DEBUG'][verbosity]
    except IndexError:
        loglevel = 'DEBUG'

    logging.basicConfig(level=loglevel)

    selected_rules = rules.difference(skip_rules)
    LOG.warning('enabled rules: %s', ', '.join(selected_rules))

    validator = Validator(pathmap=pathmap,
                          fail_fast=fail_fast,
                          docroot=docroot,
                          rules=selected_rules)

    for path in paths:
        LOG.info('checking %s', path)
        try:
            with validator(path) as v:
                renderer = LinkCheckerRenderer(v)
                lexer = LinkCheckerLexer(v, renderer)
                markdown = mistune.Markdown(renderer, inline=lexer)

                with open(path, 'r') as fd:
                    markdown(fd.read())
        except ValidationError:
            all_errors += len(v.errors)
            print('{}:'.format(path))
            for err in v.errors:
                print('  {}'.format(err))

            if fail_fast:
                break

    if all_errors:
        raise click.ClickException(
            'Found {} validation errors'.format(all_errors))


if __name__ == '__main__':
    main()
